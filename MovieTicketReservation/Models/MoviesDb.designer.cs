#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MovieTicketReservation.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MOVIE_TICKET_RESERVATION")]
	public partial class MoviesDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgeLimitation(AgeLimitation instance);
    partial void UpdateAgeLimitation(AgeLimitation instance);
    partial void DeleteAgeLimitation(AgeLimitation instance);
    partial void InsertTicketClass(TicketClass instance);
    partial void UpdateTicketClass(TicketClass instance);
    partial void DeleteTicketClass(TicketClass instance);
    partial void InsertBookingHeader(BookingHeader instance);
    partial void UpdateBookingHeader(BookingHeader instance);
    partial void DeleteBookingHeader(BookingHeader instance);
    partial void InsertCine_MovieDetail(Cine_MovieDetail instance);
    partial void UpdateCine_MovieDetail(Cine_MovieDetail instance);
    partial void DeleteCine_MovieDetail(Cine_MovieDetail instance);
    partial void InsertCinema(Cinema instance);
    partial void UpdateCinema(Cinema instance);
    partial void DeleteCinema(Cinema instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertMovie_EditionDetail(Movie_EditionDetail instance);
    partial void UpdateMovie_EditionDetail(Movie_EditionDetail instance);
    partial void DeleteMovie_EditionDetail(Movie_EditionDetail instance);
    partial void InsertMovie_GenreDetail(Movie_GenreDetail instance);
    partial void UpdateMovie_GenreDetail(Movie_GenreDetail instance);
    partial void DeleteMovie_GenreDetail(Movie_GenreDetail instance);
    partial void InsertMovieEdition(MovieEdition instance);
    partial void UpdateMovieEdition(MovieEdition instance);
    partial void DeleteMovieEdition(MovieEdition instance);
    partial void InsertMovieGenre(MovieGenre instance);
    partial void UpdateMovieGenre(MovieGenre instance);
    partial void DeleteMovieGenre(MovieGenre instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertSeat_ShowDetail(Seat_ShowDetail instance);
    partial void UpdateSeat_ShowDetail(Seat_ShowDetail instance);
    partial void DeleteSeat_ShowDetail(Seat_ShowDetail instance);
    partial void InsertShowTime(ShowTime instance);
    partial void UpdateShowTime(ShowTime instance);
    partial void DeleteShowTime(ShowTime instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertCinemaImage(CinemaImage instance);
    partial void UpdateCinemaImage(CinemaImage instance);
    partial void DeleteCinemaImage(CinemaImage instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertTagDetail(TagDetail instance);
    partial void UpdateTagDetail(TagDetail instance);
    partial void DeleteTagDetail(TagDetail instance);
    #endregion
		
		public MoviesDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MOVIE_TICKET_RESERVATIONConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoviesDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgeLimitation> AgeLimitations
		{
			get
			{
				return this.GetTable<AgeLimitation>();
			}
		}
		
		public System.Data.Linq.Table<TicketClass> TicketClasses
		{
			get
			{
				return this.GetTable<TicketClass>();
			}
		}
		
		public System.Data.Linq.Table<BookingHeader> BookingHeaders
		{
			get
			{
				return this.GetTable<BookingHeader>();
			}
		}
		
		public System.Data.Linq.Table<Cine_MovieDetail> Cine_MovieDetails
		{
			get
			{
				return this.GetTable<Cine_MovieDetail>();
			}
		}
		
		public System.Data.Linq.Table<Cinema> Cinemas
		{
			get
			{
				return this.GetTable<Cinema>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Movie_EditionDetail> Movie_EditionDetails
		{
			get
			{
				return this.GetTable<Movie_EditionDetail>();
			}
		}
		
		public System.Data.Linq.Table<Movie_GenreDetail> Movie_GenreDetails
		{
			get
			{
				return this.GetTable<Movie_GenreDetail>();
			}
		}
		
		public System.Data.Linq.Table<MovieEdition> MovieEditions
		{
			get
			{
				return this.GetTable<MovieEdition>();
			}
		}
		
		public System.Data.Linq.Table<MovieGenre> MovieGenres
		{
			get
			{
				return this.GetTable<MovieGenre>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Seat_ShowDetail> Seat_ShowDetails
		{
			get
			{
				return this.GetTable<Seat_ShowDetail>();
			}
		}
		
		public System.Data.Linq.Table<ShowTime> ShowTimes
		{
			get
			{
				return this.GetTable<ShowTime>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<CinemaImage> CinemaImages
		{
			get
			{
				return this.GetTable<CinemaImage>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<TagDetail> TagDetails
		{
			get
			{
				return this.GetTable<TagDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgeLimitation")]
	public partial class AgeLimitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LimitationID;
		
		private string _Description;
		
		private EntitySet<Movie> _Movies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLimitationIDChanging(string value);
    partial void OnLimitationIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AgeLimitation()
		{
			this._Movies = new EntitySet<Movie>(new Action<Movie>(this.attach_Movies), new Action<Movie>(this.detach_Movies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitationID", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LimitationID
		{
			get
			{
				return this._LimitationID;
			}
			set
			{
				if ((this._LimitationID != value))
				{
					this.OnLimitationIDChanging(value);
					this.SendPropertyChanging();
					this._LimitationID = value;
					this.SendPropertyChanged("LimitationID");
					this.OnLimitationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeLimitation_Movie", Storage="_Movies", ThisKey="LimitationID", OtherKey="AgeLimitationID")]
		public EntitySet<Movie> Movies
		{
			get
			{
				return this._Movies;
			}
			set
			{
				this._Movies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.AgeLimitation = this;
		}
		
		private void detach_Movies(Movie entity)
		{
			this.SendPropertyChanging();
			entity.AgeLimitation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketClass")]
	public partial class TicketClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ClassID;
		
		private string _Name;
		
		private System.Nullable<decimal> _Price;
		
		private EntitySet<Seat> _Seats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(string value);
    partial void OnClassIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public TicketClass()
		{
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="VarChar(9) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(5)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Money")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketClass_Seat", Storage="_Seats", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.TicketClass = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.TicketClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookingHeader")]
	public partial class BookingHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HeaderID;
		
		private System.Nullable<int> _MemberID;
		
		private string _SessionID;
		
		private System.Nullable<bool> _Took;
		
		private System.Nullable<decimal> _Total;
		
		private System.Nullable<System.DateTime> _ReservedTime;
		
		private EntitySet<Seat_ShowDetail> _Seat_ShowDetails;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHeaderIDChanging(int value);
    partial void OnHeaderIDChanged();
    partial void OnMemberIDChanging(System.Nullable<int> value);
    partial void OnMemberIDChanged();
    partial void OnSessionIDChanging(string value);
    partial void OnSessionIDChanged();
    partial void OnTookChanging(System.Nullable<bool> value);
    partial void OnTookChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnReservedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReservedTimeChanged();
    #endregion
		
		public BookingHeader()
		{
			this._Seat_ShowDetails = new EntitySet<Seat_ShowDetail>(new Action<Seat_ShowDetail>(this.attach_Seat_ShowDetails), new Action<Seat_ShowDetail>(this.detach_Seat_ShowDetails));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeaderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HeaderID
		{
			get
			{
				return this._HeaderID;
			}
			set
			{
				if ((this._HeaderID != value))
				{
					this.OnHeaderIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderID = value;
					this.SendPropertyChanged("HeaderID");
					this.OnHeaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", DbType="Int")]
		public System.Nullable<int> MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="VarChar(MAX)")]
		public string SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Took", DbType="Bit")]
		public System.Nullable<bool> Took
		{
			get
			{
				return this._Took;
			}
			set
			{
				if ((this._Took != value))
				{
					this.OnTookChanging(value);
					this.SendPropertyChanging();
					this._Took = value;
					this.SendPropertyChanged("Took");
					this.OnTookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReservedTime
		{
			get
			{
				return this._ReservedTime;
			}
			set
			{
				if ((this._ReservedTime != value))
				{
					this.OnReservedTimeChanging(value);
					this.SendPropertyChanging();
					this._ReservedTime = value;
					this.SendPropertyChanged("ReservedTime");
					this.OnReservedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookingHeader_Seat_ShowDetail", Storage="_Seat_ShowDetails", ThisKey="HeaderID", OtherKey="BookingHeaderID")]
		public EntitySet<Seat_ShowDetail> Seat_ShowDetails
		{
			get
			{
				return this._Seat_ShowDetails;
			}
			set
			{
				this._Seat_ShowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_BookingHeader", Storage="_Member", ThisKey="MemberID", OtherKey="MemberID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.BookingHeaders.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.BookingHeaders.Add(this);
						this._MemberID = value.MemberID;
					}
					else
					{
						this._MemberID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.BookingHeader = this;
		}
		
		private void detach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.BookingHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cine_MovieDetails")]
	public partial class Cine_MovieDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailsID;
		
		private int _MovieID;
		
		private string _CinemaID;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<System.DateTime> _BeginShowDate;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<Cinema> _Cinema;
		
		private EntityRef<Movie> _Movie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailsIDChanging(int value);
    partial void OnDetailsIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnCinemaIDChanging(string value);
    partial void OnCinemaIDChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnBeginShowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginShowDateChanged();
    #endregion
		
		public Cine_MovieDetail()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Cinema = default(EntityRef<Cinema>);
			this._Movie = default(EntityRef<Movie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailsID
		{
			get
			{
				return this._DetailsID;
			}
			set
			{
				if ((this._DetailsID != value))
				{
					this.OnDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._DetailsID = value;
					this.SendPropertyChanged("DetailsID");
					this.OnDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginShowDate", DbType="Date")]
		public System.Nullable<System.DateTime> BeginShowDate
		{
			get
			{
				return this._BeginShowDate;
			}
			set
			{
				if ((this._BeginShowDate != value))
				{
					this.OnBeginShowDateChanging(value);
					this.SendPropertyChanging();
					this._BeginShowDate = value;
					this.SendPropertyChanged("BeginShowDate");
					this.OnBeginShowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cine_MovieDetail_Schedule", Storage="_Schedules", ThisKey="DetailsID", OtherKey="Cine_MovieDetailsID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Cine_MovieDetail", Storage="_Cinema", ThisKey="CinemaID", OtherKey="CinemaID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.Cine_MovieDetails.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.Cine_MovieDetails.Add(this);
						this._CinemaID = value.CinemaID;
					}
					else
					{
						this._CinemaID = default(string);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Cine_MovieDetail", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Cine_MovieDetails.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Cine_MovieDetails.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Cine_MovieDetail = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Cine_MovieDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cinema")]
	public partial class Cinema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CinemaID;
		
		private string _Name;
		
		private string _Address;
		
		private string _Phone;
		
		private EntitySet<Cine_MovieDetail> _Cine_MovieDetails;
		
		private EntitySet<Room> _Rooms;
		
		private EntitySet<CinemaImage> _CinemaImages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCinemaIDChanging(string value);
    partial void OnCinemaIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Cinema()
		{
			this._Cine_MovieDetails = new EntitySet<Cine_MovieDetail>(new Action<Cine_MovieDetail>(this.attach_Cine_MovieDetails), new Action<Cine_MovieDetail>(this.detach_Cine_MovieDetails));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._CinemaImages = new EntitySet<CinemaImage>(new Action<CinemaImage>(this.attach_CinemaImages), new Action<CinemaImage>(this.detach_CinemaImages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Cine_MovieDetail", Storage="_Cine_MovieDetails", ThisKey="CinemaID", OtherKey="CinemaID")]
		public EntitySet<Cine_MovieDetail> Cine_MovieDetails
		{
			get
			{
				return this._Cine_MovieDetails;
			}
			set
			{
				this._Cine_MovieDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Room", Storage="_Rooms", ThisKey="CinemaID", OtherKey="CinemaID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_CinemaImage", Storage="_CinemaImages", ThisKey="CinemaID", OtherKey="CinemaID")]
		public EntitySet<CinemaImage> CinemaImages
		{
			get
			{
				return this._CinemaImages;
			}
			set
			{
				this._CinemaImages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cine_MovieDetails(Cine_MovieDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_Cine_MovieDetails(Cine_MovieDetail entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
		
		private void attach_CinemaImages(CinemaImage entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = this;
		}
		
		private void detach_CinemaImages(CinemaImage entity)
		{
			this.SendPropertyChanging();
			entity.Cinema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _MovieLength;
		
		private string _Director;
		
		private string _Actors;
		
		private string _ThumbnailURL;
		
		private string _TrailerURL;
		
		private System.Nullable<bool> _Available;
		
		private System.Nullable<System.DateTime> _ReleasedDate;
		
		private System.Nullable<System.DateTime> _BeginShowDate;
		
		private System.Nullable<int> _Duration;
		
		private string _AgeLimitationID;
		
		private string _LongDescription;
		
		private string _WideThumbnail;
		
		private EntitySet<Cine_MovieDetail> _Cine_MovieDetails;
		
		private EntitySet<Movie_EditionDetail> _Movie_EditionDetails;
		
		private EntitySet<Movie_GenreDetail> _Movie_GenreDetails;
		
		private EntityRef<AgeLimitation> _AgeLimitation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMovieLengthChanging(System.Nullable<int> value);
    partial void OnMovieLengthChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    partial void OnActorsChanging(string value);
    partial void OnActorsChanged();
    partial void OnThumbnailURLChanging(string value);
    partial void OnThumbnailURLChanged();
    partial void OnTrailerURLChanging(string value);
    partial void OnTrailerURLChanged();
    partial void OnAvailableChanging(System.Nullable<bool> value);
    partial void OnAvailableChanged();
    partial void OnReleasedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReleasedDateChanged();
    partial void OnBeginShowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginShowDateChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnAgeLimitationIDChanging(string value);
    partial void OnAgeLimitationIDChanged();
    partial void OnLongDescriptionChanging(string value);
    partial void OnLongDescriptionChanged();
    partial void OnWideThumbnailChanging(string value);
    partial void OnWideThumbnailChanged();
    #endregion
		
		public Movie()
		{
			this._Cine_MovieDetails = new EntitySet<Cine_MovieDetail>(new Action<Cine_MovieDetail>(this.attach_Cine_MovieDetails), new Action<Cine_MovieDetail>(this.detach_Cine_MovieDetails));
			this._Movie_EditionDetails = new EntitySet<Movie_EditionDetail>(new Action<Movie_EditionDetail>(this.attach_Movie_EditionDetails), new Action<Movie_EditionDetail>(this.detach_Movie_EditionDetails));
			this._Movie_GenreDetails = new EntitySet<Movie_GenreDetail>(new Action<Movie_GenreDetail>(this.attach_Movie_GenreDetails), new Action<Movie_GenreDetail>(this.detach_Movie_GenreDetails));
			this._AgeLimitation = default(EntityRef<AgeLimitation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieLength", DbType="Int")]
		public System.Nullable<int> MovieLength
		{
			get
			{
				return this._MovieLength;
			}
			set
			{
				if ((this._MovieLength != value))
				{
					this.OnMovieLengthChanging(value);
					this.SendPropertyChanging();
					this._MovieLength = value;
					this.SendPropertyChanged("MovieLength");
					this.OnMovieLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Director", DbType="NVarChar(100)")]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actors", DbType="NVarChar(MAX)")]
		public string Actors
		{
			get
			{
				return this._Actors;
			}
			set
			{
				if ((this._Actors != value))
				{
					this.OnActorsChanging(value);
					this.SendPropertyChanging();
					this._Actors = value;
					this.SendPropertyChanged("Actors");
					this.OnActorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailURL", DbType="VarChar(255)")]
		public string ThumbnailURL
		{
			get
			{
				return this._ThumbnailURL;
			}
			set
			{
				if ((this._ThumbnailURL != value))
				{
					this.OnThumbnailURLChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailURL = value;
					this.SendPropertyChanged("ThumbnailURL");
					this.OnThumbnailURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrailerURL", DbType="VarChar(MAX)")]
		public string TrailerURL
		{
			get
			{
				return this._TrailerURL;
			}
			set
			{
				if ((this._TrailerURL != value))
				{
					this.OnTrailerURLChanging(value);
					this.SendPropertyChanging();
					this._TrailerURL = value;
					this.SendPropertyChanged("TrailerURL");
					this.OnTrailerURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit")]
		public System.Nullable<bool> Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleasedDate", DbType="Date")]
		public System.Nullable<System.DateTime> ReleasedDate
		{
			get
			{
				return this._ReleasedDate;
			}
			set
			{
				if ((this._ReleasedDate != value))
				{
					this.OnReleasedDateChanging(value);
					this.SendPropertyChanging();
					this._ReleasedDate = value;
					this.SendPropertyChanged("ReleasedDate");
					this.OnReleasedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginShowDate", DbType="Date")]
		public System.Nullable<System.DateTime> BeginShowDate
		{
			get
			{
				return this._BeginShowDate;
			}
			set
			{
				if ((this._BeginShowDate != value))
				{
					this.OnBeginShowDateChanging(value);
					this.SendPropertyChanging();
					this._BeginShowDate = value;
					this.SendPropertyChanged("BeginShowDate");
					this.OnBeginShowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeLimitationID", DbType="VarChar(3)")]
		public string AgeLimitationID
		{
			get
			{
				return this._AgeLimitationID;
			}
			set
			{
				if ((this._AgeLimitationID != value))
				{
					if (this._AgeLimitation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgeLimitationIDChanging(value);
					this.SendPropertyChanging();
					this._AgeLimitationID = value;
					this.SendPropertyChanged("AgeLimitationID");
					this.OnAgeLimitationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongDescription", DbType="NVarChar(MAX)")]
		public string LongDescription
		{
			get
			{
				return this._LongDescription;
			}
			set
			{
				if ((this._LongDescription != value))
				{
					this.OnLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LongDescription = value;
					this.SendPropertyChanged("LongDescription");
					this.OnLongDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WideThumbnail", DbType="VarChar(MAX)")]
		public string WideThumbnail
		{
			get
			{
				return this._WideThumbnail;
			}
			set
			{
				if ((this._WideThumbnail != value))
				{
					this.OnWideThumbnailChanging(value);
					this.SendPropertyChanging();
					this._WideThumbnail = value;
					this.SendPropertyChanged("WideThumbnail");
					this.OnWideThumbnailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Cine_MovieDetail", Storage="_Cine_MovieDetails", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Cine_MovieDetail> Cine_MovieDetails
		{
			get
			{
				return this._Cine_MovieDetails;
			}
			set
			{
				this._Cine_MovieDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_EditionDetail", Storage="_Movie_EditionDetails", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Movie_EditionDetail> Movie_EditionDetails
		{
			get
			{
				return this._Movie_EditionDetails;
			}
			set
			{
				this._Movie_EditionDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_GenreDetail", Storage="_Movie_GenreDetails", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Movie_GenreDetail> Movie_GenreDetails
		{
			get
			{
				return this._Movie_GenreDetails;
			}
			set
			{
				this._Movie_GenreDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeLimitation_Movie", Storage="_AgeLimitation", ThisKey="AgeLimitationID", OtherKey="LimitationID", IsForeignKey=true)]
		public AgeLimitation AgeLimitation
		{
			get
			{
				return this._AgeLimitation.Entity;
			}
			set
			{
				AgeLimitation previousValue = this._AgeLimitation.Entity;
				if (((previousValue != value) 
							|| (this._AgeLimitation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgeLimitation.Entity = null;
						previousValue.Movies.Remove(this);
					}
					this._AgeLimitation.Entity = value;
					if ((value != null))
					{
						value.Movies.Add(this);
						this._AgeLimitationID = value.LimitationID;
					}
					else
					{
						this._AgeLimitationID = default(string);
					}
					this.SendPropertyChanged("AgeLimitation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cine_MovieDetails(Cine_MovieDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Cine_MovieDetails(Cine_MovieDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Movie_EditionDetails(Movie_EditionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Movie_EditionDetails(Movie_EditionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
		
		private void attach_Movie_GenreDetails(Movie_GenreDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Movie_GenreDetails(Movie_GenreDetail entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie_EditionDetails")]
	public partial class Movie_EditionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _EditionID;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<MovieEdition> _MovieEdition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnEditionIDChanging(string value);
    partial void OnEditionIDChanged();
    #endregion
		
		public Movie_EditionDetail()
		{
			this._Movie = default(EntityRef<Movie>);
			this._MovieEdition = default(EntityRef<MovieEdition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditionID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EditionID
		{
			get
			{
				return this._EditionID;
			}
			set
			{
				if ((this._EditionID != value))
				{
					if (this._MovieEdition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEditionIDChanging(value);
					this.SendPropertyChanging();
					this._EditionID = value;
					this.SendPropertyChanged("EditionID");
					this.OnEditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_EditionDetail", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Movie_EditionDetails.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Movie_EditionDetails.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieEdition_Movie_EditionDetail", Storage="_MovieEdition", ThisKey="EditionID", OtherKey="EditionID", IsForeignKey=true)]
		public MovieEdition MovieEdition
		{
			get
			{
				return this._MovieEdition.Entity;
			}
			set
			{
				MovieEdition previousValue = this._MovieEdition.Entity;
				if (((previousValue != value) 
							|| (this._MovieEdition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieEdition.Entity = null;
						previousValue.Movie_EditionDetails.Remove(this);
					}
					this._MovieEdition.Entity = value;
					if ((value != null))
					{
						value.Movie_EditionDetails.Add(this);
						this._EditionID = value.EditionID;
					}
					else
					{
						this._EditionID = default(string);
					}
					this.SendPropertyChanged("MovieEdition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie_GenreDetails")]
	public partial class Movie_GenreDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _GenreID;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<MovieGenre> _MovieGenre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnGenreIDChanging(string value);
    partial void OnGenreIDChanged();
    #endregion
		
		public Movie_GenreDetail()
		{
			this._Movie = default(EntityRef<Movie>);
			this._MovieGenre = default(EntityRef<MovieGenre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._MovieGenre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Movie_GenreDetail", Storage="_Movie", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Movie_GenreDetails.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Movie_GenreDetails.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieGenre_Movie_GenreDetail", Storage="_MovieGenre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public MovieGenre MovieGenre
		{
			get
			{
				return this._MovieGenre.Entity;
			}
			set
			{
				MovieGenre previousValue = this._MovieGenre.Entity;
				if (((previousValue != value) 
							|| (this._MovieGenre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieGenre.Entity = null;
						previousValue.Movie_GenreDetails.Remove(this);
					}
					this._MovieGenre.Entity = value;
					if ((value != null))
					{
						value.Movie_GenreDetails.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(string);
					}
					this.SendPropertyChanged("MovieGenre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieEdition")]
	public partial class MovieEdition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EditionID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Movie_EditionDetail> _Movie_EditionDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEditionIDChanging(string value);
    partial void OnEditionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MovieEdition()
		{
			this._Movie_EditionDetails = new EntitySet<Movie_EditionDetail>(new Action<Movie_EditionDetail>(this.attach_Movie_EditionDetails), new Action<Movie_EditionDetail>(this.detach_Movie_EditionDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditionID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EditionID
		{
			get
			{
				return this._EditionID;
			}
			set
			{
				if ((this._EditionID != value))
				{
					this.OnEditionIDChanging(value);
					this.SendPropertyChanging();
					this._EditionID = value;
					this.SendPropertyChanged("EditionID");
					this.OnEditionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieEdition_Movie_EditionDetail", Storage="_Movie_EditionDetails", ThisKey="EditionID", OtherKey="EditionID")]
		public EntitySet<Movie_EditionDetail> Movie_EditionDetails
		{
			get
			{
				return this._Movie_EditionDetails;
			}
			set
			{
				this._Movie_EditionDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_EditionDetails(Movie_EditionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MovieEdition = this;
		}
		
		private void detach_Movie_EditionDetails(Movie_EditionDetail entity)
		{
			this.SendPropertyChanging();
			entity.MovieEdition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieGenre")]
	public partial class MovieGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GenreID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Movie_GenreDetail> _Movie_GenreDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(string value);
    partial void OnGenreIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MovieGenre()
		{
			this._Movie_GenreDetails = new EntitySet<Movie_GenreDetail>(new Action<Movie_GenreDetail>(this.attach_Movie_GenreDetails), new Action<Movie_GenreDetail>(this.detach_Movie_GenreDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieGenre_Movie_GenreDetail", Storage="_Movie_GenreDetails", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<Movie_GenreDetail> Movie_GenreDetails
		{
			get
			{
				return this._Movie_GenreDetails;
			}
			set
			{
				this._Movie_GenreDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Movie_GenreDetails(Movie_GenreDetail entity)
		{
			this.SendPropertyChanging();
			entity.MovieGenre = this;
		}
		
		private void detach_Movie_GenreDetails(Movie_GenreDetail entity)
		{
			this.SendPropertyChanging();
			entity.MovieGenre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoomID;
		
		private string _CinemaID;
		
		private string _Name;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Seat> _Seats;
		
		private EntityRef<Cinema> _Cinema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnCinemaIDChanging(string value);
    partial void OnCinemaIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Room()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._Cinema = default(EntityRef<Cinema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="VarChar(5)")]
		public string CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Schedule", Storage="_Schedules", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Seat", Storage="_Seats", ThisKey="RoomID", OtherKey="RoomID")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_Room", Storage="_Cinema", ThisKey="CinemaID", OtherKey="CinemaID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._CinemaID = value.CinemaID;
					}
					else
					{
						this._CinemaID = default(string);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private int _ShowTimeID;
		
		private int _Cine_MovieDetailsID;
		
		private string _RoomID;
		
		private EntitySet<Seat_ShowDetail> _Seat_ShowDetails;
		
		private EntityRef<Cine_MovieDetail> _Cine_MovieDetail;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<ShowTime> _ShowTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIDChanging(int value);
    partial void OnScheduleIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnShowTimeIDChanging(int value);
    partial void OnShowTimeIDChanged();
    partial void OnCine_MovieDetailsIDChanging(int value);
    partial void OnCine_MovieDetailsIDChanged();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    #endregion
		
		public Schedule()
		{
			this._Seat_ShowDetails = new EntitySet<Seat_ShowDetail>(new Action<Seat_ShowDetail>(this.attach_Seat_ShowDetails), new Action<Seat_ShowDetail>(this.detach_Seat_ShowDetails));
			this._Cine_MovieDetail = default(EntityRef<Cine_MovieDetail>);
			this._Room = default(EntityRef<Room>);
			this._ShowTime = default(EntityRef<ShowTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTimeID", DbType="Int NOT NULL")]
		public int ShowTimeID
		{
			get
			{
				return this._ShowTimeID;
			}
			set
			{
				if ((this._ShowTimeID != value))
				{
					if (this._ShowTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowTimeIDChanging(value);
					this.SendPropertyChanging();
					this._ShowTimeID = value;
					this.SendPropertyChanged("ShowTimeID");
					this.OnShowTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cine_MovieDetailsID", DbType="Int NOT NULL")]
		public int Cine_MovieDetailsID
		{
			get
			{
				return this._Cine_MovieDetailsID;
			}
			set
			{
				if ((this._Cine_MovieDetailsID != value))
				{
					if (this._Cine_MovieDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCine_MovieDetailsIDChanging(value);
					this.SendPropertyChanging();
					this._Cine_MovieDetailsID = value;
					this.SendPropertyChanged("Cine_MovieDetailsID");
					this.OnCine_MovieDetailsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Seat_ShowDetail", Storage="_Seat_ShowDetails", ThisKey="ScheduleID", OtherKey="ScheduleID")]
		public EntitySet<Seat_ShowDetail> Seat_ShowDetails
		{
			get
			{
				return this._Seat_ShowDetails;
			}
			set
			{
				this._Seat_ShowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cine_MovieDetail_Schedule", Storage="_Cine_MovieDetail", ThisKey="Cine_MovieDetailsID", OtherKey="DetailsID", IsForeignKey=true)]
		public Cine_MovieDetail Cine_MovieDetail
		{
			get
			{
				return this._Cine_MovieDetail.Entity;
			}
			set
			{
				Cine_MovieDetail previousValue = this._Cine_MovieDetail.Entity;
				if (((previousValue != value) 
							|| (this._Cine_MovieDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cine_MovieDetail.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Cine_MovieDetail.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._Cine_MovieDetailsID = value.DetailsID;
					}
					else
					{
						this._Cine_MovieDetailsID = default(int);
					}
					this.SendPropertyChanged("Cine_MovieDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Schedule", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(string);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTime_Schedule", Storage="_ShowTime", ThisKey="ShowTimeID", OtherKey="ShowTimeID", IsForeignKey=true)]
		public ShowTime ShowTime
		{
			get
			{
				return this._ShowTime.Entity;
			}
			set
			{
				ShowTime previousValue = this._ShowTime.Entity;
				if (((previousValue != value) 
							|| (this._ShowTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShowTime.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._ShowTime.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._ShowTimeID = value.ShowTimeID;
					}
					else
					{
						this._ShowTimeID = default(int);
					}
					this.SendPropertyChanged("ShowTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeatID;
		
		private string _RoomID;
		
		private string _ClassID;
		
		private string _Name;
		
		private EntitySet<Seat_ShowDetail> _Seat_ShowDetails;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<TicketClass> _TicketClass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    partial void OnRoomIDChanging(string value);
    partial void OnRoomIDChanged();
    partial void OnClassIDChanging(string value);
    partial void OnClassIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Seat()
		{
			this._Seat_ShowDetails = new EntitySet<Seat_ShowDetail>(new Action<Seat_ShowDetail>(this.attach_Seat_ShowDetails), new Action<Seat_ShowDetail>(this.detach_Seat_ShowDetails));
			this._Room = default(EntityRef<Room>);
			this._TicketClass = default(EntityRef<TicketClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="VarChar(9)")]
		public string ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._TicketClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Seat_ShowDetail", Storage="_Seat_ShowDetails", ThisKey="SeatID", OtherKey="SeatID")]
		public EntitySet<Seat_ShowDetail> Seat_ShowDetails
		{
			get
			{
				return this._Seat_ShowDetails;
			}
			set
			{
				this._Seat_ShowDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Seat", Storage="_Room", ThisKey="RoomID", OtherKey="RoomID", IsForeignKey=true)]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._RoomID = value.RoomID;
					}
					else
					{
						this._RoomID = default(string);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketClass_Seat", Storage="_TicketClass", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public TicketClass TicketClass
		{
			get
			{
				return this._TicketClass.Entity;
			}
			set
			{
				TicketClass previousValue = this._TicketClass.Entity;
				if (((previousValue != value) 
							|| (this._TicketClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketClass.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._TicketClass.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(string);
					}
					this.SendPropertyChanged("TicketClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Seat_ShowDetails(Seat_ShowDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat_ShowDetails")]
	public partial class Seat_ShowDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _BookingHeaderID;
		
		private int _ScheduleID;
		
		private int _SeatID;
		
		private System.Nullable<bool> _Reserved;
		
		private System.Nullable<bool> _Paid;
		
		private EntityRef<BookingHeader> _BookingHeader;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<Seat> _Seat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingHeaderIDChanging(System.Nullable<int> value);
    partial void OnBookingHeaderIDChanged();
    partial void OnScheduleIDChanging(int value);
    partial void OnScheduleIDChanged();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    partial void OnReservedChanging(System.Nullable<bool> value);
    partial void OnReservedChanged();
    partial void OnPaidChanging(System.Nullable<bool> value);
    partial void OnPaidChanged();
    #endregion
		
		public Seat_ShowDetail()
		{
			this._BookingHeader = default(EntityRef<BookingHeader>);
			this._Schedule = default(EntityRef<Schedule>);
			this._Seat = default(EntityRef<Seat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingHeaderID", DbType="Int")]
		public System.Nullable<int> BookingHeaderID
		{
			get
			{
				return this._BookingHeaderID;
			}
			set
			{
				if ((this._BookingHeaderID != value))
				{
					if (this._BookingHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingHeaderIDChanging(value);
					this.SendPropertyChanging();
					this._BookingHeaderID = value;
					this.SendPropertyChanged("BookingHeaderID");
					this.OnBookingHeaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reserved", DbType="Bit")]
		public System.Nullable<bool> Reserved
		{
			get
			{
				return this._Reserved;
			}
			set
			{
				if ((this._Reserved != value))
				{
					this.OnReservedChanging(value);
					this.SendPropertyChanging();
					this._Reserved = value;
					this.SendPropertyChanged("Reserved");
					this.OnReservedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit")]
		public System.Nullable<bool> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BookingHeader_Seat_ShowDetail", Storage="_BookingHeader", ThisKey="BookingHeaderID", OtherKey="HeaderID", IsForeignKey=true)]
		public BookingHeader BookingHeader
		{
			get
			{
				return this._BookingHeader.Entity;
			}
			set
			{
				BookingHeader previousValue = this._BookingHeader.Entity;
				if (((previousValue != value) 
							|| (this._BookingHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BookingHeader.Entity = null;
						previousValue.Seat_ShowDetails.Remove(this);
					}
					this._BookingHeader.Entity = value;
					if ((value != null))
					{
						value.Seat_ShowDetails.Add(this);
						this._BookingHeaderID = value.HeaderID;
					}
					else
					{
						this._BookingHeaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BookingHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Seat_ShowDetail", Storage="_Schedule", ThisKey="ScheduleID", OtherKey="ScheduleID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Seat_ShowDetails.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Seat_ShowDetails.Add(this);
						this._ScheduleID = value.ScheduleID;
					}
					else
					{
						this._ScheduleID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Seat_ShowDetail", Storage="_Seat", ThisKey="SeatID", OtherKey="SeatID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Seat_ShowDetails.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Seat_ShowDetails.Add(this);
						this._SeatID = value.SeatID;
					}
					else
					{
						this._SeatID = default(int);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShowTime")]
	public partial class ShowTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShowTimeID;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
		private EntitySet<Schedule> _Schedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShowTimeIDChanging(int value);
    partial void OnShowTimeIDChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    #endregion
		
		public ShowTime()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShowTimeID
		{
			get
			{
				return this._ShowTimeID;
			}
			set
			{
				if ((this._ShowTimeID != value))
				{
					this.OnShowTimeIDChanging(value);
					this.SendPropertyChanging();
					this._ShowTimeID = value;
					this.SendPropertyChanged("ShowTimeID");
					this.OnShowTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTime_Schedule", Storage="_Schedules", ThisKey="ShowTimeID", OtherKey="ShowTimeID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ShowTime = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ShowTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Description;
		
		private EntitySet<Member> _Members;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Member", Storage="_Members", ThisKey="RoleID", OtherKey="Role")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private string _Title;
		
		private string _Description;
		
		private string _ThumbnailURL;
		
		private string _Content;
		
		private System.Nullable<System.DateTime> _PostedDate;
		
		private System.Nullable<int> _ViewCount;
		
		private EntitySet<TagDetail> _TagDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnThumbnailURLChanging(string value);
    partial void OnThumbnailURLChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnPostedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostedDateChanged();
    partial void OnViewCountChanging(System.Nullable<int> value);
    partial void OnViewCountChanged();
    #endregion
		
		public New()
		{
			this._TagDetails = new EntitySet<TagDetail>(new Action<TagDetail>(this.attach_TagDetails), new Action<TagDetail>(this.detach_TagDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailURL", DbType="VarChar(255)")]
		public string ThumbnailURL
		{
			get
			{
				return this._ThumbnailURL;
			}
			set
			{
				if ((this._ThumbnailURL != value))
				{
					this.OnThumbnailURLChanging(value);
					this.SendPropertyChanging();
					this._ThumbnailURL = value;
					this.SendPropertyChanged("ThumbnailURL");
					this.OnThumbnailURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedDate", DbType="Date")]
		public System.Nullable<System.DateTime> PostedDate
		{
			get
			{
				return this._PostedDate;
			}
			set
			{
				if ((this._PostedDate != value))
				{
					this.OnPostedDateChanging(value);
					this.SendPropertyChanging();
					this._PostedDate = value;
					this.SendPropertyChanged("PostedDate");
					this.OnPostedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewCount", DbType="Int")]
		public System.Nullable<int> ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_TagDetail", Storage="_TagDetails", ThisKey="NewsID", OtherKey="NewsID")]
		public EntitySet<TagDetail> TagDetails
		{
			get
			{
				return this._TagDetails;
			}
			set
			{
				this._TagDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TagDetails(TagDetail entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_TagDetails(TagDetail entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CinemaImage")]
	public partial class CinemaImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageID;
		
		private string _CinemaID;
		
		private string _ImageURL;
		
		private EntityRef<Cinema> _Cinema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIDChanging(int value);
    partial void OnImageIDChanged();
    partial void OnCinemaIDChanging(string value);
    partial void OnCinemaIDChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    #endregion
		
		public CinemaImage()
		{
			this._Cinema = default(EntityRef<Cinema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageID
		{
			get
			{
				return this._ImageID;
			}
			set
			{
				if ((this._ImageID != value))
				{
					this.OnImageIDChanging(value);
					this.SendPropertyChanging();
					this._ImageID = value;
					this.SendPropertyChanged("ImageID");
					this.OnImageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CinemaID", DbType="VarChar(5)")]
		public string CinemaID
		{
			get
			{
				return this._CinemaID;
			}
			set
			{
				if ((this._CinemaID != value))
				{
					if (this._Cinema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCinemaIDChanging(value);
					this.SendPropertyChanging();
					this._CinemaID = value;
					this.SendPropertyChanged("CinemaID");
					this.OnCinemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="VarChar(MAX)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cinema_CinemaImage", Storage="_Cinema", ThisKey="CinemaID", OtherKey="CinemaID", IsForeignKey=true)]
		public Cinema Cinema
		{
			get
			{
				return this._Cinema.Entity;
			}
			set
			{
				Cinema previousValue = this._Cinema.Entity;
				if (((previousValue != value) 
							|| (this._Cinema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cinema.Entity = null;
						previousValue.CinemaImages.Remove(this);
					}
					this._Cinema.Entity = value;
					if ((value != null))
					{
						value.CinemaImages.Add(this);
						this._CinemaID = value.CinemaID;
					}
					else
					{
						this._CinemaID = default(string);
					}
					this.SendPropertyChanged("Cinema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID;
		
		private string _IDCardNumber;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Email;
		
		private string _Password;
		
		private string _Phone;
		
		private string _Address;
		
		private System.Nullable<int> _Role;
		
		private System.Nullable<bool> _Gender;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private string _AvatarURL;
		
		private EntitySet<BookingHeader> _BookingHeaders;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberIDChanging(int value);
    partial void OnMemberIDChanged();
    partial void OnIDCardNumberChanging(string value);
    partial void OnIDCardNumberChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnRoleChanging(System.Nullable<int> value);
    partial void OnRoleChanged();
    partial void OnGenderChanging(System.Nullable<bool> value);
    partial void OnGenderChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnAvatarURLChanging(string value);
    partial void OnAvatarURLChanged();
    #endregion
		
		public Member()
		{
			this._BookingHeaders = new EntitySet<BookingHeader>(new Action<BookingHeader>(this.attach_BookingHeaders), new Action<BookingHeader>(this.detach_BookingHeaders));
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID
		{
			get
			{
				return this._MemberID;
			}
			set
			{
				if ((this._MemberID != value))
				{
					this.OnMemberIDChanging(value);
					this.SendPropertyChanging();
					this._MemberID = value;
					this.SendPropertyChanged("MemberID");
					this.OnMemberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCardNumber", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string IDCardNumber
		{
			get
			{
				return this._IDCardNumber;
			}
			set
			{
				if ((this._IDCardNumber != value))
				{
					this.OnIDCardNumberChanging(value);
					this.SendPropertyChanging();
					this._IDCardNumber = value;
					this.SendPropertyChanged("IDCardNumber");
					this.OnIDCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(255)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int")]
		public System.Nullable<int> Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit")]
		public System.Nullable<bool> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarURL", DbType="VarChar(MAX)")]
		public string AvatarURL
		{
			get
			{
				return this._AvatarURL;
			}
			set
			{
				if ((this._AvatarURL != value))
				{
					this.OnAvatarURLChanging(value);
					this.SendPropertyChanging();
					this._AvatarURL = value;
					this.SendPropertyChanged("AvatarURL");
					this.OnAvatarURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_BookingHeader", Storage="_BookingHeaders", ThisKey="MemberID", OtherKey="MemberID")]
		public EntitySet<BookingHeader> BookingHeaders
		{
			get
			{
				return this._BookingHeaders;
			}
			set
			{
				this._BookingHeaders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Member", Storage="_Role1", ThisKey="Role", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._Role = value.RoleID;
					}
					else
					{
						this._Role = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookingHeaders(BookingHeader entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_BookingHeaders(BookingHeader entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private string _Name;
		
		private EntitySet<TagDetail> _TagDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tag()
		{
			this._TagDetails = new EntitySet<TagDetail>(new Action<TagDetail>(this.attach_TagDetails), new Action<TagDetail>(this.detach_TagDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagDetail", Storage="_TagDetails", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<TagDetail> TagDetails
		{
			get
			{
				return this._TagDetails;
			}
			set
			{
				this._TagDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TagDetails(TagDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_TagDetails(TagDetail entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TagDetails")]
	public partial class TagDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private int _TagID;
		
		private EntityRef<New> _New;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    #endregion
		
		public TagDetail()
		{
			this._New = default(EntityRef<New>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_TagDetail", Storage="_New", ThisKey="NewsID", OtherKey="NewsID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.TagDetails.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.TagDetails.Add(this);
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TagDetail", Storage="_Tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.TagDetails.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.TagDetails.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
